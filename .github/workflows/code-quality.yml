name: 📊 Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run code quality analysis weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

env:
  NODE_VERSION: '18'

jobs:
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci
        
      - name: 🔍 Run ESLint with reporting
        run: |
          npx eslint . --format json --output-file eslint-results.json || true
          npx eslint . --format stylish
        continue-on-error: true
        
      - name: 📊 Upload ESLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-results
          path: eslint-results.json
          
      - name: 🔍 Run TypeScript compiler check
        run: npx tsc --noEmit --pretty
        continue-on-error: true
        
      - name: 📏 Check code formatting
        run: |
          if command -v prettier &> /dev/null; then
            npx prettier --check . || echo "Prettier not configured"
          else
            echo "Prettier not installed, skipping format check"
          fi
        continue-on-error: true
        
      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: github.actor != 'dependabot[bot]' && secrets.SONAR_TOKEN != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  bundle-analysis:
    name: 📦 Bundle Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build project
        run: npm run build
        
      - name: 📊 Analyze bundle size
        uses: github/webpack-bundle-analyzer@v1
        if: always()
        with:
          bundle_path: portfolio/dist
          
      - name: 📊 Bundle size report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get bundle stats
            const distPath = path.join(process.cwd(), 'portfolio/dist');
            
            if (fs.existsSync(distPath)) {
              const files = fs.readdirSync(distPath, { withFileTypes: true });
              const jsFiles = files.filter(file => file.name.endsWith('.js'));
              const cssFiles = files.filter(file => file.name.endsWith('.css'));
              
              let totalJSSize = 0;
              let totalCSSSize = 0;
              
              jsFiles.forEach(file => {
                const filePath = path.join(distPath, file.name);
                totalJSSize += fs.statSync(filePath).size;
              });
              
              cssFiles.forEach(file => {
                const filePath = path.join(distPath, file.name);
                totalCSSSize += fs.statSync(filePath).size;
              });
              
              const formatBytes = (bytes) => {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
              };
              
              const comment = `## 📦 Bundle Size Report
              
              | File Type | Size | Files |
              |-----------|------|-------|
              | JavaScript | ${formatBytes(totalJSSize)} | ${jsFiles.length} |
              | CSS | ${formatBytes(totalCSSSize)} | ${cssFiles.length} |
              | **Total** | **${formatBytes(totalJSSize + totalCSSSize)}** | **${jsFiles.length + cssFiles.length}** |
              
              ### 📊 Performance Budget
              - ✅ JS Bundle < 250KB: ${totalJSSize < 250000 ? 'PASS' : 'FAIL'}
              - ✅ CSS Bundle < 50KB: ${totalCSSSize < 50000 ? 'PASS' : 'FAIL'}
              - ✅ Total < 300KB: ${(totalJSSize + totalCSSSize) < 300000 ? 'PASS' : 'FAIL'}
              
              ---
              *Bundle analysis performed on commit ${context.sha.substring(0, 7)}*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build project
        run: npm run build
        
      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true